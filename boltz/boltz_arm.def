Bootstrap: docker
From: nvidia/cuda:12.8.0-devel-ubuntu24.04   

%environment
  export PATH="/opt/conda/bin:$PATH"
  source /opt/conda/etc/profile.d/conda.sh
  conda activate boltz
  export PYTHONNOUSERSITE=1
  export BOLTZ_CACHE=/opt/boltz_cache

%post
  set -e                                # bail out on the first error
  apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
      build-essential git wget curl ca-certificates \
      python3 python3-pip python3-dev python3-venv \
      g++ gcc pkg-config clang cmake ninja-build libopenblas-dev \
      autoconf automake libtool m4 patchelf && \
  rm -rf /var/lib/apt/lists/*

  # python3 already points to 3.12 in Noble; one helper link is plenty
  ln -sf /usr/bin/python3 /usr/local/bin/python

  export PATH="/opt/conda/bin:$PATH"
  MINIFORGE_VER=24.11.0-0
  curl -L -o /tmp/mf.sh \
     https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VER}/Miniforge3-${MINIFORGE_VER}-Linux-aarch64.sh
  bash /tmp/mf.sh -b -p /opt/conda && rm /tmp/mf.sh
  eval "$(/opt/conda/bin/conda shell.bash hook)"
  
  mamba create -y -n boltz python=3.12
  conda activate boltz

  # Pre-install gemmi so pip never compiles it
  mamba install -y -c conda-forge \
    numpy==1.26.3 scipy==1.13.1 pandas==2.2.3 \
    hydra-core==1.3.2 numba==0.61.0 llvmlite \
    gemmi==0.7.1 scikit-learn==1.6.1 pybind11==2.12.0

  # CUDA 12.8 PyTorch stack (use --no-deps to avoid NumPy upgrade)
  pip install --no-cache-dir --extra-index-url https://download.pytorch.org/whl/test \
      --no-deps torch==2.7.0+cu128 torchvision==0.22.0 torchaudio==2.7.0 triton==3.3.0

  mamba install -y -c conda-forge \
      numpy==1.26.3 scipy==1.13.1 pandas==2.2.3 \
      hydra-core==1.3.2 \
      numba==0.61.0 llvmlite patchelf \
      # gemmi now handled above; version fixed

  /opt/conda/envs/boltz/bin/python -m pip install --no-cache-dir pytorch-lightning==2.4.0

  /opt/conda/envs/boltz/bin/python -m pip install --no-cache-dir \
      "pybind11-stubgen>=2.5"  # optional â€“ helps if you ever build gemmi
  /opt/conda/envs/boltz/bin/python -m pip install --no-cache-dir \
      rdkit==2024.3.2 \
      dm-tree==0.1.8 \
      requests==2.32.3 types-requests \
      einops==0.8.0 einx==0.3.0 fairscale==0.4.13 \
      mashumaro==3.14 modelcif==1.2 wandb==0.18.7 \
      click==8.1.7 pyyaml==6.0.2 biopython==1.84 \
      trifast>=0.1.11

  /opt/conda/envs/boltz/bin/python -m pip install --no-cache-dir scikit-build-core cmake ninja
  /opt/conda/envs/boltz/bin/python -m pip install --no-cache-dir pybind11-stubgen==0.7.1
  /opt/conda/envs/boltz/bin/python -m pip install --no-cache-dir "numpy<2.2"
  /opt/conda/envs/boltz/bin/python -m pip install --no-cache-dir \
      "numpy<2.2" \
      cuequivariance-ops-cu12==0.5.1 \
      chembl_structure_pipeline==1.2.2 \
      cuequivariance-ops-torch-cu12==0.5.1 \
      cuequivariance-torch==0.5.1
      
  /opt/conda/envs/boltz/bin/pip install --no-build-isolation --no-deps boltz==2.1.1

  mkdir -p /opt/boltz_cache
  # Download Boltz 2 model files
  wget -q -O /opt/boltz_cache/boltz2_conf.ckpt \
       https://huggingface.co/boltz-community/boltz-2/resolve/main/boltz2_conf.ckpt
  wget -q -O /opt/boltz_cache/boltz2_aff.ckpt \
       https://huggingface.co/boltz-community/boltz-2/resolve/main/boltz2_aff.ckpt
  wget -q -O /opt/boltz_cache/mols.tar \
       https://huggingface.co/boltz-community/boltz-2/resolve/main/mols.tar
  # Extract mols.tar to create mols directory
  cd /opt/boltz_cache && tar -xf mols.tar && rm mols.tar
  chmod -R a+r /opt/boltz_cache
  echo "Boltz 2 cache and assets setup complete."

  mamba clean -y --all

%runscript
  #!/bin/bash
  source /opt/conda/etc/profile.d/conda.sh
  conda activate boltz

  CONDA_ENV_LIB_DIR="/opt/conda/envs/boltz/lib"
  if [ -d "${CONDA_ENV_LIB_DIR}" ]; then
    export LD_LIBRARY_PATH="${CONDA_ENV_LIB_DIR}${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
  fi
  
  exec "$@"

%help
  This container provides Boltz v2.1.1 for NVIDIA aarch64 architectures (GH200 optimized).
  New CUDA kernels from NVIDIA (latest).
  Uses Python 3.12. PyTorch, Torchvision, Torchaudio, Triton installed via pip from test index.
  Pytorch-Lightning installed via pip afterwards.
  Includes model weights for both structure prediction (boltz2_conf.ckpt) and affinity prediction (boltz2_aff.ckpt).
  GPU acceleration enabled.

  To run:
  singularity exec --nv <path_to_sif> boltz <boltz_args>
