Bootstrap: docker
From: nvidia/cuda:12.6.0-runtime-ubuntu22.04
Stage: spython-base

%post
# Install essential build tools and dependencies
apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    wget \
    git \
    gcc \
    g++ \
    make \
    zlib1g-dev \
    zstd \
    software-properties-common \
    cmake \
    ninja-build \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Install Python 3.11 
add-apt-repository ppa:deadsnakes/ppa && \
    DEBIAN_FRONTEND=noninteractive apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    python3.11 \
    python3-pip \
    python3.11-venv \
    python3.11-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create Python virtual environment
python3.11 -m venv /alphafold3_venv
export PATH="/hmmer/bin:/alphafold3_venv/bin:$PATH"

# Update pip and install build tools
/alphafold3_venv/bin/pip install --upgrade pip setuptools wheel

# Install HMMER
mkdir /hmmer_build /hmmer && \
    wget http://eddylab.org/software/hmmer/hmmer-3.4.tar.gz --directory-prefix /hmmer_build && \
    (cd /hmmer_build && tar zxf hmmer-3.4.tar.gz && rm hmmer-3.4.tar.gz) && \
    (cd /hmmer_build/hmmer-3.4 && ./configure --prefix /hmmer) && \
    (cd /hmmer_build/hmmer-3.4 && make -j$(nproc)) && \
    (cd /hmmer_build/hmmer-3.4 && make install) && \
    (cd /hmmer_build/hmmer-3.4/easel && make install) && \
    rm -R /hmmer_build

# Clone AlphaFold 3 repository
git clone https://github.com/google-deepmind/alphafold3.git /alphafold3
cd /alphafold3

# Install build dependencies for C++ components
/alphafold3_venv/bin/pip install cmake ninja pybind11 numpy scikit_build_core

# Install requirements from repository files
/alphafold3_venv/bin/pip install -r requirements.txt
/alphafold3_venv/bin/pip install -r dev-requirements.txt

# Use CMake to build any C++ components
mkdir -p /alphafold3/build
cd /alphafold3/build
cmake .. -G Ninja -DCMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
ninja -j$(nproc)

# Install AlphaFold 3 package
cd /alphafold3
/alphafold3_venv/bin/pip install --no-deps .

# Build chemical components database
/alphafold3_venv/bin/build_data

# Create directories for input and output data
mkdir -p /data/af_input /data/af_output /data/models /data/public_databases

# Verify installations
echo "Verifying AlphaFold 3 installation..."
/alphafold3_venv/bin/python -c "import alphafold3; print('AlphaFold 3 successfully imported')"

# Create simple activation script without GPU-specific settings
cat > /alphafold3_activate.sh << 'EOF'
#!/bin/bash
export PATH="/hmmer/bin:/alphafold3_venv/bin:$PATH"
export PYTHONPATH="/alphafold3"
# Base environment settings, users can override as needed
export TRITON_CACHE_DIR=/data/.triton
EOF

chmod +x /alphafold3_activate.sh

%environment
export PATH="/hmmer/bin:/alphafold3_venv/bin:$PATH"
export PYTHONPATH="/alphafold3"
export TRITON_CACHE_DIR=/data/.triton

%runscript
. /alphafold3_activate.sh
cd /alphafold3
exec python3 run_alphafold.py "$@"

%labels
    Version v1.0
    Description "AlphaFold 3 container for x86 systems with NVIDIA GPUs"

%help
This container provides AlphaFold 3 for x86 systems with NVIDIA GPUs.
To run this container, you will need access to the AlphaFold 3 model weights from Google DeepMind.
Follow the instructions at https://github.com/google-deepmind/alphafold3 to request access.

GPU-specific performance settings:
  For optimal performance on specific GPU models, you may want to set the following 
  environment variables when running the container:
  
  - For memory management:
    XLA_PYTHON_CLIENT_PREALLOCATE=true 
    XLA_CLIENT_MEM_FRACTION=0.XX (adjust according to your GPU memory, typically 0.95)
  
  - For performance features:
    JAX_ENABLE_FLASH_ATTENTION=true (if your GPU supports it)
    JAX_TRITON_FUSION_COMPILER=triton

Example usage:
  singularity run --nv \
    --bind /path/to/input:/data/af_input \
    --bind /path/to/output:/data/af_output \
    --bind /path/to/models:/data/models \
    --bind /path/to/databases:/data/public_databases \
    alphafold3_x86.sif \
    --json_path=/data/af_input/fold_input.json \
    --model_dir=/data/models \
    --output_dir=/data/af_output \
    --db_dir=/data/public_databases